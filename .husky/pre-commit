#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# If a previous commit attempt's stash still exists, notify, and exit.
(git stash list | grep COMMIT_HOOK_STASH) && echo "A previous git stash named "COMMIT_HOOK_STASH" exists. Please handle and remove the stash then try again." && exit 1

echo ""
echo "Undo dist changes..."
echo ""
git reset dist
git checkout dist

echo ""
echo "Stash unstaged/untracked files if any..."
echo ""
# commit staged changes temporarily
git commit --no-verify -m "TMP_COMMIT_HOOK_COMMIT"
# stash only untstaged and untracked files
git stash save -u COMMIT_HOOK_STASH
git reset --soft HEAD~

echo ""
echo "Status after stash:"
echo ""
git status

# See .lintstagedrc.js for the steps that will run at this point.
npx lint-staged --verbose

# NOTE: After this, the post-commit hook will unstash the COMMIT_HOOK_STASH. See .husky/post-commit.
